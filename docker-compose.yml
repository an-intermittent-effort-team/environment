version: "3"

networks:
  api:
  elk:


#volumes:
#  appdata:
#    driver: local

services:

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    networks:
      - api
    volumes:
      - ${REDIS_CONF_FILE}:/etc/redis/redis.conf:ro
      #- ../redis/data:/data
    command: ["redis-server", "/etc/redis/redis.conf"]
    ports:
      - "${REDIS_HOST_PORT}:6379"

  mysql:
    image: mysql:${MYSQL_VERSION_DEFAULT}
    container_name: mysql
    networks:
      - api
      - elk
#    volumes:
#      - ${MYSQL_CONF_FILE}:/etc/mysql/my.cnf:ro
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "${MYSQL_HOST_PORT}:3306"

  phpfpm:
#    image: php:${PHP_VERSION}
    build:
      context: ./php-fpm
      args:
        PHP_VERSION: ${PHP_VERSION}
    container_name: phpfpm
    networks:
      - api
    expose:
      - 9001
    restart: always
    volumes:
#      - ${API_PATH}/:/opt/www/:rw
      - ./data/www/:/opt/www/:rw
      - ${PHP_PHP_INI_FILE}:/usr/local/etc/php/php.ini:ro
      - ${PHP_FPM_CONF_FILE}:/usr/local/etc/php/php-fpm.conf:rw
      - ${PHP_FPM_CONF_POOL_FILE}:/usr/local/etc/php/pool.d/:rw
    cap_add:
      - SYS_PTRACE
  #    stdin_open: true
  #    tty: true


#    php:
#      build:
#        context: ./services
#        args:
#          PHP_VERSION: php:${PHP_VERSION}-fpm-alpine
#          CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#          PHP_EXTENSIONS: ${PHP_EXTENSIONS}
#          TZ: "$TZ"
#      container_name: php


  nginx:
    ## build
    build:
      context: nginx/
      args:
        NGINX_VERSION: ${NGINX_VERSION}
#   ## image 方式
#   image: nginx:${NGINX_VERSION}
    container_name: nginx
    networks:
      - api
      - elk
    volumes:
      - ./data/www/:/opt/www/:rw
      - ./data/nginx/:/var/log/nginx/:rw
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
      - ${NGINX_CONF_DIR}:/etc/nginx/conf.d/:rw
    ports:
      - "${NGINX_PORT}:80"


  jenkins:
    image: jenkins/jenkins:${JENKINS_VERSION}
    container_name: jenkins
    user: root
    networks:
      - api
    volumes:
      - ./data/jenkins/logs/:/var/jenkins_home/logs/
      - ./data/jenkins/secrets/:/var/jenkins_home/secrets/
      - ./data/jenkins/workspace/:/var/jenkins_home/workspace/
      - ./data/www/:/opt/www/
      #- /var/run/docker.sock:/var/run/docker.sock
      #- /usr/bin/docker:/usr/bin/docker
    ports:
      - "${JENKINS_HOST_PORT}:8080"
      - "${JENKINS_HOST_SLAVE_PORT}:50000"

#  kibana:
#    ## build
#    build:
#      context: kibana/
#      args:
#        KIBANA_VERSION: $KIBANA_VERSION
##    ## image 方式
##    image: kibana:${KIBANA_VERSION}
#    container_name: kibana
#    volumes:
#      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
#    environment:
#      - I18N_LOCALE=zh-CN
#      - XPACK_GRAPH_ENABLED=true
#      - TIMELION_ENABLED=true
#      - XPACK_MONITORING_COLLECTION_ENABLED="true"
#    ports:
#      - "${KIBANA_HOST_PORT}:5601"
#    networks:
#      - elk

#  elasticsearch:
#    ## build方式，可以在引入镜像之后安装需要的插件
#    build:
#      context: elasticsearch/
#      args:
#        ES_VERSION: ${ES_VERSION}
##    ## images方式
##    image: elasticsearch:${ES_VERSION}
#    container_name: elasticsearch
#    environment:
#      - cluster.name=mellos
#      - node.name=es73
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#      - "ELASTIC_PASSWORD=${ES_PASSWD}"
#      - discovery.seed_hosts=es73
#      - cluster.initial_master_nodes=es73
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
#      - ./data/elasticsearch:/usr/share/elasticsearch/data
#    ports:
#      - "${ES_HOST_PORT}:9200"
#    networks:
#      - elk

#  logstash:
#    ## build 方式 ，可以再镜像引入后安装需要的插件
#    build:
#      context: logstash/
#      args:
#        LOGSTASH_VERSION: ${LOGSTASH_VERSION}
##    ## image 方式
##    image: docker.elastic.co/logstash/logstash:${LOGSTASH_VERSION}
#    container_name: logstash
#    ports:
#      - "5044:5044"
#      - "5000:5000/tcp"
#      - "5000:5000/udp"
#      - "9600:9600"
#    volumes:
#      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
#      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
#    environment:
#      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
#    networks:
#      - elk
#    depends_on:
#      - elasticsearch


#  filebeat:
#    build:
#      context: filebeat/
#      args:
#        FILEBEAT_VERSION: ${FILEBEAT_VERSION}
##    image: docker.elastic.co/beats/filebeat:${FILEBEAT_VERSION}
#    container_name: filebeat
#    volumes:
#      #- ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
#      - ./data/filebeat/logs:/usr/share/filebeat/logs:rw
#      - ./data/nginx/:/var/log/nginx/ # 收集nginx日志
#    environment:
#      - TZ=Asia/Shanghai
#    networks:
#      - elk
#    depends_on:
#      - kibana
##    links:
##      - logstash # 把logstash的ip记录到该容器中


#  #无法使用，再研究一下
#  cerebro:
#    image: lmenezes/cerebro:${CEREBRO_VERSION}
#    container_name: cerebro
#    ports:
#      - "${CEREBRO_HOST_PORT}:9800"
#    command:
#      - -Dhosts.0.host=http://elasticsearch:9200
#    networks:
#      - elk